<?php

/**
 * @file
 * Pathologic text filter for Drupal.
 *
 * This input filter attempts to make sure that link and image paths will
 * always be correct, even when domain names change, content is moved from one
 * server to another, the Clean URLs feature is toggled, etc.
 */

/**
 * Implements hook_filter_info().
 */
function pathologic_filter_info() {
  return array(
    'pathologic' => array(
      'title' => t('Correct URLs with Pathologic'),
      'process callback' => '_pathologic_filter',
      'settings callback' => '_pathologic_settings',
      'default settings' => array(
        'local_paths' => '',
        'absolute' => TRUE,
      ),
      'weight' => 65535,
    )
  );
}

/**
 * Settings callback for Pathologic.
 */
function _pathologic_settings($form, &$form_state, $filter, $format, $defaults) {
  return array(
    'reminder' => array(
      '#type' => 'item',
      '#title' => t('In most cases, Pathologic should be the <em>last</em> filter in the &ldquo;Filter processing order&rdquo; list.'),
      '#weight' => -10,
    ),
    'absolute' => array(
      '#type' => 'checkbox',
      '#title' => t('Output full absolute URLs'),
      '#default_value' => isset($filter->settings['absolute']) ? $filter->settings['absolute'] : $defaults['absolute'],
      '#description' => t('If checked, Pathologic will output full absolute URLs, with a protocol and server fragment (such as <code>http://example.com/foo/bar</code>); this is useful if you want images and links to not break for those reading the content in a feed reader or through some other form of aggregation. However, in cases where the site is being served via both HTTP and HTTPS, it may be necessary to uncheck this box so that protocol and server fragments are omitted in the paths Pathologic creates (such as <code>/foo/bar</code>) to avoid issues where the browser complains about pages containing both secure and insecure content.'),
      '#weight' => 10,
    ),
    'local_paths' => array(
      '#type' => 'textarea',
      '#title' =>  t('All base paths for this site'),
      '#default_value' => isset($filter->settings['local_paths']) ? $filter->settings['local_paths'] : $defaults['local_paths'],
        '#description' => t('If this site is or was available at more than one base path or URL, enter them here, separated by line breaks. For example, if this site is live at <code>http://example.com/</code> but has a staging version at <code>http://dev.example.org/staging/</code>, you would enter both those URLs here. If confused, please read <a href="!docs">Pathologic&rsquo;s documentation</a> for more information about this option and what it affects.', array('!docs' => 'http://drupal.org/node/257026')),
      '#weight' => 20,
    ),
  );
}

/**
 * Pathologic filter callback.
 *
 * @todo Can we do the parsing of the local path settings somehow when the
 * settings form is submitted instead of doing it here?
 */
function _pathologic_filter($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $base_url;
  $base_url_parts = parse_url($base_url);
  $settings = &drupal_static(__FUNCTION__, array());
  if (!isset($settings[$filter->format])) {
    $filter->settings['local_paths_array'] = array_map('trim', explode("\n", $filter->settings['local_paths']));
    $filter->settings['local_paths_exploded'] = array(
    );
    foreach ($filter->settings['local_paths_array'] as $local) {
      $parts = parse_url($local);
      // To avoid duplication, check…
      if (
        (
          // If this path has a host, and…
          isset($parts['host']) &&
          // The host is different from the current host…
          $parts['host'] !== $base_url_parts['host']
        ) ||
        // Or…
        (
          // The path doesn't have a host…
          !isset($parts['host'])
        ) &&
        // And the path part is not the same as the current installation…
        $parts['path'] !== $base_url_parts['path']
      ) {
      // Add it to the list.
        $filter->settings['local_paths_exploded'][] = $parts;
      }
      // Now add local paths.
      $filter->settings['local_paths_exploded'][] = array('path' => $base_url_parts['path']);
      $filter->settings['local_paths_exploded'][] = array('path' => $base_url_parts['path'], 'host' => $base_url_parts['host']);
    }
    $settings[$filter->format] = $filter->settings;
  }
  $settings['langcode'] = $langcode;
  $settings['current_settings'] = &$settings[$filter->format];
  return preg_replace_callback('~(href|src|action|longdesc)="([^"]+)~i', '_pathologic_replace', $text);
}

/**
 * Replace the attributes. preg_replace_callback() callback.
 */
function _pathologic_replace($matches) {
  global $base_path;
  // Get the settings for the filter. There's basically three ways to do this:
  // abuse eval() and friends; abuse globals; or abuse drupal_static(). The
  // latter is the least offensive, I think.
  $settings = drupal_static('_pathologic_filter');
  // Now parse the URL
  $parts = parse_url($matches[2]);
  // Do some early tests to see if we should just give up now.
  if (
    // If parse_url() failed, give up.
    $parts === FALSE ||
    // If there's a scheme part and it doesn't look useful, bail out.
    // "internal" is for Path Filter compatibility.
    (isset($parts['scheme']) && !in_array($parts['scheme'], array('http', 'https', 'files', 'internal'))) ||
    // Also bail out if this doesn't look like a "local" path.
    (isset($parts['host']) && !in_array($parts['host'], $settings['current_settings']['local_paths_array']))
  ) {
    // Give up by "replacing" the original with the same.
    return $matches[0];
  }
  // First, "files:" support. This is fairly easy.
  if (isset($parts['scheme']) && $parts['scheme'] === 'files') {
    // Can we create a file URL for it?
    $file_url = file_create_url(file_build_uri($parts['path']));
    if ($file_url) {
      return $matches[1] . '="' . $file_url;
    }
    else {
      // That didn't work. Bail out.
      return $matches[0];
    }
  }
  // Does the path have the base_path in it? This will be the case if the Drupal
  // root is at http://example.com/drupal/ and the URL looks like
  // http://example.com/drupal/foo or /drupal/foo
  if (isset($parts['path'])) {
    if (strpos($parts['path'], $base_path) === 0) {
      $parts['trimmed_path'] = drupal_substr($parts['path'], drupal_strlen($base_path));
    }
    else {
      $parts['trimmed_path'] = $parts['path'];
    }
    if ($parts['trimmed_path'] === '') {
      // Okay, if we just ended up with an empty string, then what happened is
      // they linked to the front page of their Drupal installation using non-
      // clean URLs (supposedly). So we'll set it to '<front>' so that we can
      // properly link to it later.
      $parts['trimmed_path'] = '<front>';
    }
    // Okay, they didn't use files:, but does it appear that the path is still
    // to a real file on the disk? If so, we don't want to adjust for language.
    // Also, skip all other tweaks.
    elseif (file_exists(realpath($parts['trimmed_path']))) {
      $settings['langcode'] = 'und';
    }
  }
  // Examine the query part of the URL. Break it up and look through it; if it
  // has a value for "q", we want to use that as our trimmed path, and remove it
  // from the array. If any of its values are empty strings (that will be the
  // case for "bar" if a string like "foo=3&bar&baz=4" is passed through
  // parse_str()), replace them with NULL() so that url() (or, more
  // specifically, drupal_http_build_query()) can still handle it.
  if (isset($parts['query'])) {
    parse_str($parts['query'], $parts['qparts']);
    foreach($parts['qparts'] as $key => $value) {
      if ($value === '') {
        $parts['qparts'][$key] = NULL;
      }
      elseif ($key === 'q') {
        $parts['trimmed_path'] = $value;
        unset($parts['qparts']['q']);
      }
    }
  }
  else {
    $parts['qparts'] = NULL;
  }
  // If we don't have a trimmed path yet, bail out.
  if (!isset($parts['trimmed_path'])) {
    return $matches[0];
  }
  // Okay, format the URL.
  $langs = language_list();
  $url = url(
    $parts['trimmed_path'],
    array(
      'query' => $parts['qparts'],
      'fragment' => isset($parts['fragment']) ? $parts['fragment'] : NULL,
      'absolute' => $settings['current_settings']['absolute'],
      'language' => isset($langs[$settings['langcode']]) ? $langs[$settings['langcode']] : NULL,
    )
  );
  // $matches[1] will be the tag attribute; src, href, etc.
  return "{$matches[1]}=\"{$url}";
}
