<?php


/**
 * Implements hook_cf_permission_alter().
 *
 * @see cf_permission()
 */
function cf_error_cf_permission_alter(&$permissions) {
  if (!is_array($permissions)){
    $permissions = array();
  }

  $permissions['view cf emergency messages'] = array(
    'title' => t("View Emergency Messages"),
    'description' => t("Grants permissions to view emergency messages presented by cf_error module."),
  );

  $permissions['view cf error messages'] = array(
    'title' => t("View Error Messages"),
    'description' => t("Grants permissions to view error messages presented by cf_error module."),
  );

  $permissions['view cf warning messages'] = array(
    'title' => t("View Warning Messages"),
    'description' => t("Grants permissions to view warning messages presented by cf_error module."),
  );

  $permissions['view cf information messages'] = array(
    'title' => t("View Information Messages"),
    'description' => t("Grants permissions to view information messages presented by cf_error module."),
  );

  $permissions['view cf debug messages'] = array(
    'title' => t("View Debug Messages"),
    'description' => t("Grants permissions to view debug messages presented by cf_error module."),
  );
}

/**
 * This provides a common solution for appending the function name to the function_history array.
 *
 * Why:
 *   This facilitates validating that the function_history is an array without having each and every usage need to manually do so.
 *
 * @param $function_history
 *   An array of function names, ie: array('0' => 'my_function_name').
 * @param $function_name
 *   The function name to append to the function_history.
 */
function cf_error_append_history(&$function_history, $function_name){
  if (!is_array($function_history)){
    $function_history = array();
  }

  if (!is_string($function_name)){
    $function_history[] = __FUNCTION__;
    cf_error_empty_string($function_history, 'function_name');
    return;
  }

  $function_history[] = $function_name;
}


/**
 * This provides a common solution for printing error messages to the screen using drupal_set_message() and watchdog().
 *
 * Why:
 *   This facilitates printing the error messages without having each and every usage need to manually do so.
 *
 * @param $message
 *   A string to display.
 * @param $variables_array
 *   An array of string substitutions for anything in the $message string.
 * @param $type
 *   The category to which this message belongs. Can be any string, but the general practice is to use the name of the module calling watchdog().
* @param $severity
 *   The severity of the message, as per RFC 3164. Possible values are WATCHDOG_ERROR, WATCHDOG_WARNING, etc.
 * @param $function_history (optional)
 *   An array of function names, ie: array('0' => 'my_function_name').
 *
 * @see drupal_set_message()
 * @see watchdog()
 * @see watchdog_severity_levels()
 */
function cf_error_print_message($message, $variables_array, $type, $severity, array $function_history = array()){
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_string($message)){
    cf_error_empty_string($function_history, 'message');
    return;
  }

  if (!is_array($variables_array)){
    cf_error_invalid_array($function_history, 'variables_array');
    return;
  }

  if (!is_string($type)){
    cf_error_empty_string($function_history, 'type');
    return;
  }

  if (!is_numeric($severity)){
    cf_error_empty_string($function_history, 'severity');
    return;
  }

  watchdog($type, $message . ", function history: %function_history", $variables_array, $severity);

  switch ($severity){
    case WATCHDOG_EMERGENCY:
      if (user_access('view cf emergency messages')){
        drupal_set_message(t($message, $variables_array), 'error', FALSE);
      }
      break;

    case WATCHDOG_ALERT:
    case WATCHDOG_CRITICAL:
    case WATCHDOG_ERROR:
      if (user_access('view cf error messages')){
        drupal_set_message(t($message, $variables_array), 'error', FALSE);
      }
      break;

    case WATCHDOG_WARNING:
      if (user_access('view cf warning messages')){
        drupal_set_message(t($message, $variables_array), 'warning', FALSE);
      }
      break;

    case WATCHDOG_NOTICE:
    case WATCHDOG_INFO:
      if (user_access('view cf information messages')){
        drupal_set_message(t($message, $variables_array), 'status', FALSE);
      }
      break;

    case WATCHDOG_DEBUG:
      if (user_access('view cf debug messages')){
        drupal_set_message(t($message, $variables_array), 'status', FALSE);
      }
      break;
  }
}

/**
 * This provides a common solution for reporting variables as invalid to the watchdog system.
 *
 * Why:
 *   Many drupal modules lack validation of parameter arguments.
 *   Checking these arguments is important for both integrity and security.
 *   Silently failing on these arguments will only hide the problem.
 *
 * @param $function_history
 *   An array of function names, ie: array('0' => 'my_function_name').
 *
 *   Deprecated usage:
 *     A string that represents the name of the calling function.
 *     NULL may be passed to avoid appending the function_name in the case that it already exists in $function_history.
 * @param $argument_name
 *   The variable name of the argument in question.
 * @param $why
 *   The specific reason for this watchdog report.
 * @param $variables (optional)
 *   Locale safe parameter handling for all text found in the 'why' parameter.
 * @param $severity (optional)
 *   This is passed directly to watchdog and represents the severity of the report.
 * deprecated_history (optional)
 *   An array of function names, ie: array('0' => 'my_function_name').
 *   This is no longer supported, instead use the first parameter: function_history..
 *
 */
function cf_error_invalid_variable($function_history, $argument_name, $why, array $variables = array(), $severity = WATCHDOG_ERROR, array $deprecated_history = array()){
  if (is_string($function_history) || is_null($function_history)){
    $function_name = $function_history;
    $function_history = $deprecated_history;
    $function_history[] = $function_name;
    watchdog('deprecated', "The old cf_error api of passing function_name directly is deprecated and will be removed in the next release, function history: %function_history", array('%function_history' => print_r($function_history, TRUE)));
  }

  cf_error_append_history($function_history, __FUNCTION__);

  if ($argument_name == ''){
    cf_error_empty_string($function_history, 'argument_name');
  }

  if (!is_string($why)){
    $why = "";
  }

  $variables_array = array_merge($variables, array('%argument_name' =>  $argument_name, '%function_history' => print_r($function_history, TRUE)));
  $message = "The argument '%argument_name' is invalid or has a problem, reason: " . $why;

  cf_error_print_message($message, $variables_array, 'bad variable', $severity, $function_history);
}

/**
 * Reports that a given argument is supposed to be a string but is not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_history
 *   An array of function names, ie: array('0' => 'my_function_name').
 *
 *   Deprecated usage:
 *     A string that represents the name of the calling function.
 *     NULL may be passed to avoid appending the function_name in the case that it already exists in $function_history.
 * @param $argument_name
 *   The variable name of the argument in question.
 * @param $severity (optional)
 *   This is passed directly to watchdog and represents the severity of the report.
 * deprecated_history (optional)
 *   An array of function names, ie: array('0' => 'my_function_name').
 *   This is no longer supported, instead use the first parameter: function_history.
 */
function cf_error_not_string($function_history, $argument_name, $severity = WATCHDOG_ERROR, array $deprecated_history = array()){
  if (is_string($function_history) || is_null($function_history)){
    $function_name = $function_history;
    $function_history = $deprecated_history;
    $function_history[] = $function_name;
    watchdog('deprecated', "The old cf_error api of passing function_name directly is deprecated and will be removed in the next release, function history: %function_history", array('%function_history' => print_r($function_history, TRUE)));
  }

  cf_error_append_history($function_history, __FUNCTION__);

  if ($argument_name == ''){
    cf_error_empty_string($function_history, 'argument_name');
  }

  cf_error_invalid_variable($function_history, $argument_name, "Must be a string.", array(), $severity);
}

/**
 * Reports that a given argument is supposed to be non-empty string but is not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_history
 *   An array of function names, ie: array('0' => 'my_function_name').
 *
 *   Deprecated usage:
 *     A string that represents the name of the calling function.
 *     NULL may be passed to avoid appending the function_name in the case that it already exists in $function_history.
 * @param $argument_name
 *   The variable name of the argument in question.
 * @param $severity (optional)
 *   This is passed directly to watchdog and represents the severity of the report.
 * deprecated_history (optional)
 *   An array of function names, ie: array('0' => 'my_function_name').
 *   This is no longer supported, instead use the first parameter: function_history.
 */
function cf_error_empty_string($function_history, $argument_name, $severity = WATCHDOG_ERROR, array $deprecated_history = array()){
  if (is_string($function_history) || is_null($function_history)){
    $function_name = $function_history;
    $function_history = $deprecated_history;
    $function_history[] = $function_name;
    watchdog('deprecated', "The old cf_error api of passing function_name directly is deprecated and will be removed in the next release, function history: %function_history", array('%function_history' => print_r($function_history, TRUE)));
  }

  cf_error_append_history($function_history, __FUNCTION__);

  if ($argument_name == ''){
    cf_error_empty_string($function_history, 'argument_name');
  }

  cf_error_invalid_variable($function_history, $argument_name, "Must not be an empty string.", array(), $severity);
}

/**
 * Reports that a given argument is supposed to be an array but is not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_history
 *   An array of function names, ie: array('0' => 'my_function_name').
 *
 *   Deprecated usage:
 *     A string that represents the name of the calling function.
 *     NULL may be passed to avoid appending the function_name in the case that it already exists in $function_history.
 * @param $argument_name
 *   The variable name of the argument in question.
 * @param $severity (optional)
 *   This is passed directly to watchdog and represents the severity of the report.
 * deprecated_history (optional)
 *   An array of function names, ie: array('0' => 'my_function_name').
 *   This is no longer supported, instead use the first parameter: function_history.
 */
function cf_error_invalid_array($function_history, $argument_name, $severity = WATCHDOG_ERROR, array $deprecated_history = array()){
  if (is_string($function_history) || is_null($function_history)){
    $function_name = $function_history;
    $function_history = $deprecated_history;
    $function_history[] = $function_name;
    watchdog('deprecated', "The old cf_error api of passing function_name directly is deprecated and will be removed in the next release, function history: %function_history", array('%function_history' => print_r($function_history, TRUE)));
  }

  cf_error_append_history($function_history, __FUNCTION__);

  if ($argument_name == ''){
    cf_error_empty_string($function_history, 'argument_name', $severity);
  }

  cf_error_invalid_variable($function_history, $argument_name, "Not a valid array.", array(), $severity);
}

/**
 * Reports that a given argument is supposed to be an object but is not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_history
 *   An array of function names, ie: array('0' => 'my_function_name').
 *
 *   Deprecated usage:
 *     A string that represents the name of the calling function.
 *     NULL may be passed to avoid appending the function_name in the case that it already exists in $function_history.
 * @param $argument_name
 *   The variable name of the argument in question.
 * @param $severity (optional)
 *   This is passed directly to watchdog and represents the severity of the report.
 * deprecated_history (optional)
 *   An array of function names, ie: array('0' => 'my_function_name').
 *   This is no longer supported, instead use the first parameter: function_history.
 */
function cf_error_invalid_object($function_history, $argument_name, $severity = WATCHDOG_ERROR, array $deprecated_history = array()){
  if (is_string($function_history) || is_null($function_history)){
    $function_name = $function_history;
    $function_history = $deprecated_history;
    $function_history[] = $function_name;
    watchdog('deprecated', "The old cf_error api of passing function_name directly is deprecated and will be removed in the next release, function history: %function_history", array('%function_history' => print_r($function_history, TRUE)));
  }

  cf_error_append_history($function_history, __FUNCTION__);

  if ($argument_name == ''){
    cf_error_empty_string($function_history, 'argument_name', $severity);
  }

  cf_error_invalid_variable($function_history, $argument_name, "Not a valid object.", array(), $severity);
}

/**
 * Reports that a given argument is supposed to be have a specific key within its array but does not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_history
 *   An array of function names, ie: array('0' => 'my_function_name').
 *
 *   Deprecated usage:
 *     A string that represents the name of the calling function.
 *     NULL may be passed to avoid appending the function_name in the case that it already exists in $function_history.
 * @param $argument_name
 *   The variable name of the argument in question.
 * @param $key_name
 *   Name of the array key that is missing.
 * @param $severity (optional)
 *   This is passed directly to watchdog and represents the severity of the report.
 * deprecated_history (optional)
 *   An array of function names, ie: array('0' => 'my_function_name').
 *   This is no longer supported, instead use the first parameter: function_history.
 */
function cf_error_missing_array_key($function_history, $argument_name, $key_name, $severity = WATCHDOG_ERROR, array $deprecated_history = array()){
  if (is_string($function_history) || is_null($function_history)){
    $function_name = $function_history;
    $function_history = $deprecated_history;
    $function_history[] = $function_name;
    watchdog('deprecated', "The old cf_error api of passing function_name directly is deprecated and will be removed in the next release, function history: %function_history", array('%function_history' => print_r($function_history, TRUE)));
  }

  cf_error_append_history($function_history, __FUNCTION__);

  if ($argument_name == ''){
    cf_error_empty_string($function_history, 'argument_name');
  }

  if ($key_name == ''){
    return cf_error_empty_string($function_history, 'key_name', $severity);
  }

  cf_error_invalid_variable($function_history, $argument_name, "The array key '%key_name' is missing.", array('%key_name' => $key_name), $severity);
}

/**
 * Reports that a given argument is supposed to be have a specific object property but does not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_history
 *   An array of function names, ie: array('0' => 'my_function_name').
 * @param $argument_name
 *   The variable name of the argument in question.
 * @param $property_name
 *   Name of the array key that is missing.
 * @param $severity (optional)
 *   This is passed directly to watchdog and represents the severity of the report.
 */
function cf_error_missing_object_property($function_history, $argument_name, $property_name, $severity = WATCHDOG_ERROR){
  cf_error_append_history($function_history, __FUNCTION__);

  if ($argument_name == ''){
    cf_error_empty_string($function_history, 'argument_name');
  }

  if ($property_name == ''){
    return cf_error_empty_string($function_history, 'property_name', $severity);
  }

  cf_error_invalid_variable($function_history, $argument_name, "The object property '%property_name' is missing.", array('%property_name' => $property_name), $severity);
}

/**
 * Reports that a given argument is supposed to be numeric but is not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_history
 *   An array of function names, ie: array('0' => 'my_function_name').
 *
 *   Deprecated usage:
 *     A string that represents the name of the calling function.
 *     NULL may be passed to avoid appending the function_name in the case that it already exists in $function_history.
 * @param $argument_name
 *   The variable name of the argument in question.
 * @param $severity (optional)
 *   This is passed directly to watchdog and represents the severity of the report.
 * deprecated_history (optional)
 *   An array of function names, ie: array('0' => 'my_function_name').
 *   This is no longer supported, instead use the first parameter: function_history.
 */
function cf_error_not_numeric($function_history, $argument_name, $severity = WATCHDOG_ERROR, array $deprecated_history = array()){
  if (is_string($function_history) || is_null($function_history)){
    $function_name = $function_history;
    $function_history = $deprecated_history;
    $function_history[] = $function_name;
    watchdog('deprecated', "The old cf_error api of passing function_name directly is deprecated and will be removed in the next release, function history: %function_history", array('%function_history' => print_r($function_history, TRUE)));
  }

  cf_error_append_history($function_history, __FUNCTION__);

  if ($argument_name == ''){
    cf_error_empty_string($function_history, 'argument_name');
  }

  cf_error_invalid_variable($function_history, $argument_name, "Not a numeric value.", array(), $severity);
}

/**
 * This provides a common solution for reporting query execution failures to the watchdog system.
 *
 * Why:
 *   All query execution calls should be wrapped in 'try' and 'catch' calls.
 *   Therefore, provide a function to be re-used in every catch for reporting the error.
 *
 * @param $function_history
 *   An array of function names, ie: array('0' => 'my_function_name').
 * @param $exception
 *   The query exception object.
 * @param $severity (optional)
 *   This is passed directly to watchdog and represents the severity of the report.
 *
 */
function cf_error_on_query_execution($function_history, $exception, $severity = WATCHDOG_ERROR){
  cf_error_append_history($function_history, __FUNCTION__);

  if (is_object($exception)){
    $exception_message = $exception->getMessage();
  }
  else {
    cf_error_invalid_object($function_history, 'exception');
    $exception_message = "";
  }

  $message = "Database Query Execution Failure: @exception";
  $variables_array = array('@exception' => $exception_message, '%function_history' => print_r($function_history, TRUE));

  cf_error_print_message($message, $variables_array, 'database', $severity, $function_history);
}
